// Code generated by goyacc -l -o parser.go parser.y. DO NOT EDIT.
package pg

import __yyfmt__ "fmt"

type pair struct {
	key string
	val interface{}
}

func setResult(l yyLexer, v Ast) {
	l.(*lex).result = v
}

type yySymType struct {
	yys      int
	obj      map[string]interface{}
	list     []interface{}
	pair     pair
	val      interface{}
	str      string
	ast      Ast
	defArgs  []FuncArg
	callArgs []Ast
	cases    []CaseE
	case_    CaseE
}

const LexError = 57346
const Let = 57347
const Eq = 57348
const Func = 57349
const OpenB = 57350
const CloseB = 57351
const OpenF = 57352
const CloseF = 57353
const OpenS = 57354
const CloseS = 57355
const Mod = 57356
const Comma = 57357
const Colon = 57358
const Plus = 57359
const Match = 57360
const Case = 57361
const RightArrow = 57362
const Compare = 57363
const Number = 57364
const String = 57365
const Literal = 57366

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LexError",
	"Let",
	"Eq",
	"Func",
	"OpenB",
	"CloseB",
	"OpenF",
	"CloseF",
	"OpenS",
	"CloseS",
	"Mod",
	"Comma",
	"Colon",
	"Plus",
	"Match",
	"Case",
	"RightArrow",
	"Compare",
	"Number",
	"String",
	"Literal",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	14, 31,
	17, 31,
	-2, 15,
	-1, 10,
	14, 32,
	17, 32,
	-2, 16,
	-1, 11,
	14, 33,
	17, 33,
	-2, 17,
}

const yyPrivate = 57344

const yyLast = 86

var yyAct = [...]int{

	25, 4, 41, 2, 46, 45, 23, 15, 30, 31,
	32, 9, 10, 11, 42, 67, 22, 12, 26, 13,
	65, 58, 55, 43, 50, 37, 19, 18, 40, 63,
	15, 71, 38, 47, 9, 10, 11, 15, 14, 57,
	51, 9, 10, 11, 48, 24, 39, 60, 15, 54,
	53, 61, 9, 10, 11, 20, 72, 64, 21, 29,
	33, 66, 68, 59, 4, 16, 35, 69, 70, 17,
	49, 36, 73, 28, 56, 27, 1, 34, 52, 44,
	8, 7, 62, 6, 5, 3,
}
var yyPact = [...]int{

	12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57, 3, 2, 41, -11, 30, -11, 69, 65,
	-14, -14, 56, 62, -11, 30, 33, -11, -1, -1000,
	-1000, -1000, -1000, -1000, -1000, 14, -1000, 30, -1000, -1000,
	-1000, 61, 0, 24, 14, -1000, -1000, -2, -1000, 68,
	23, -3, 52, -1000, -1000, 31, 19, -4, -1, -1000,
	-9, -11, -1000, 12, -1000, -1, -1000, 11, -1000, 45,
	-1000, -11, -1000, -1000,
}
var yyPgo = [...]int{

	0, 0, 3, 85, 84, 83, 82, 2, 81, 6,
	80, 79, 78, 5, 4, 38, 77, 76,
}
var yyR1 = [...]int{

	0, 17, 2, 2, 3, 3, 4, 5, 7, 7,
	7, 6, 6, 1, 1, 1, 1, 1, 10, 16,
	11, 11, 12, 12, 12, 13, 14, 8, 8, 8,
	8, 15, 15, 15, 9, 9, 9,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 4, 7, 0, 5,
	4, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	1, 1, 0, 1, 1, 6, 4, 4, 4, 3,
	3, 1, 1, 1, 0, 3, 2,
}
var yyChk = [...]int{

	-1000, -17, -2, -3, -1, -4, -5, -8, -10, 22,
	23, 24, 5, 7, -15, 18, 8, 12, 24, 24,
	14, 17, -1, -9, 15, -1, -1, 6, 8, -15,
	22, 23, 24, -15, -16, 10, 9, -1, -9, 13,
	-1, -7, 15, 24, -11, -13, -14, 19, -9, 9,
	24, 16, -12, -13, -14, 24, 6, 16, 24, 11,
	16, 20, -6, 10, -1, 24, -7, 24, -1, -2,
	-7, 20, 11, -1,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 4, 5, 13, 14, -2,
	-2, -2, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 8, 29,
	31, 32, 33, 30, 18, 0, 27, 34, 36, 28,
	6, 0, 0, 0, 22, 20, 21, 0, 35, 0,
	0, 0, 0, 23, 24, 0, 0, 0, 8, 19,
	0, 0, 7, 0, 12, 8, 10, 0, 26, 0,
	9, 0, 11, 25,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setResult(yylex, yyDollar[1].ast)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			//	setResult(yylex, $1)
			yyVAL.ast = yyDollar[1].ast
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			__yyfmt__.Println(yyDollar[4].ast)
			yyVAL.ast = NewLetBlock(yyDollar[2].str, yyDollar[4].ast)
		}
	case 7:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.ast = NewFuncDeclaration(yyDollar[2].str, yyDollar[4].defArgs, yyDollar[7].ast)
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.defArgs = []FuncArg{}
		}
	case 9:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.defArgs = append([]FuncArg{FuncArg{Name: yyDollar[2].str, Type: yyDollar[4].str}}, yyDollar[5].defArgs...)
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.defArgs = append([]FuncArg{FuncArg{Name: yyDollar[1].str, Type: yyDollar[3].str}}, yyDollar[4].defArgs...)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ast = yyDollar[2].ast
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].ast
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			__yyfmt__.Println("number", yyDollar[1].str)
			yyVAL.ast = NewNumber(yyDollar[1].str)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			__yyfmt__.Println("string", yyDollar[1].str)
			yyVAL.ast = yyDollar[1].str
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			__yyfmt__.Println("literal", yyDollar[1].str)
			yyVAL.ast = yyDollar[1].str
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ast = NewMatch(yyDollar[2].ast)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			/// bla bla
			yyVAL.cases = append([]CaseE{yyDollar[2].case_}, yyDollar[3].case_)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.case_ = yyDollar[1].case_
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.case_ = yyDollar[1].case_
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.case_ = []CaseE{}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.case_ = yyDollar[1].case_
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.case_ = yyDollar[1].case_
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.case_ = TypedCase(yyDollar[2].str, yyDollar[4].str, yyDollar[6].ast)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.case_ = UntypedCase(yyDollar[2].str, yyDollar[4].ast)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ast = NewFuncCall(yyDollar[1].str, yyDollar[3].callArgs...)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.ast = NewFuncCall("getByIndex", yyDollar[1].str, yyDollar[3].ast)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ast = NewFuncCall("%", yyDollar[1].ast, yyDollar[3].ast)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ast = NewFuncCall("+", yyDollar[1].ast, yyDollar[3].ast)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ast = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.callArgs = nil
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.callArgs = append([]Ast{yyDollar[2].ast}, yyDollar[3].callArgs...)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.callArgs = append([]Ast{yyDollar[1].ast}, yyDollar[2].callArgs...)
		}
	}
	goto yystack /* stack new state and value */
}
